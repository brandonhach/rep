// Install Prisma VSCODE extension

// Whenever you update your schema, you will have to update your DB using "prisma migrate dev"

// prisma db push

// prisma studio

//IMPORTANT!!!!!!!!!!!!!!!!!
// ADD current country, nationality
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  OWNER
  ADMIN
  SUPPORTER
  SUBSCRIBER
}

enum StatusType {
  NONE
  SAFE
  CAUT
  BAN
}

model User {
  id            String        @id @default(cuid())
  name          String?
  image         String        @default("https://images.unsplash.com/photo-1534528741775-53994a69daeb?q=80&w=1364&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  country       String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  avatar        Bytes?        @db.ByteA
  accounts      Account[]
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  profile       Profile?
  comment       Comment[]
  affiliation   Affiliation[]
  moodboard     Moodboard[]
  tradePost     TradePost[]
  rep           Rep[]
  profileUser   Rep[] @relation("profileUser")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  description     String  @default("No information provided.")
  backgroundImage String  @default("https://images.unsplash.com/photo-1720371300677-ba4838fa0678?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  contacts        Int      @default(0)
  followers       Int      @default(0)
  likes           Int      @default(0)
  dislikes        Int      @default(0)
  status          StatusType @default(NONE)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("profiles")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  emotes    String[]
  userId    String
  profileId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Affiliation {
  id               String  @id @default(cuid())
  affiliationTitle String
  affiliationRole  String
  platform         String
  platformImage    String
  platformURL      String
  verified         Boolean @default(false)
  userId           String
  profileId        String
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("affiliations")
}

model Moodboard {
  id             String @id @default(cuid())
  moodboardImage String
  userId         String
  profileId      String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("moodboards")
}

model TradePost {
  id          String @id @default(cuid())
  title       String
  image       String
  description String
  price       String
  postType    String
  userId      String
  profileId   String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tradePosts")
}

model Rep {
  id        String   @id @default(cuid())
  description String
  rating    Boolean
  log      Log?
  keywords  String[]
  createdAt DateTime @default(now())
  profileId String   
  profile   User     @relation(name: "profileUser", fields: [profileId], references: [id], onDelete: Cascade)
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reps")
}

model Log {
  id        String   @id @default(cuid())
  title     String    
  description String
  repId     String   @unique
  rep       Rep      @relation(fields: [repId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
